
Lab 11: Multiply two matrices
def multiply_matrices(a, b):
    rows_a = len(a)
    cols_a = len(a[0])
    cols_b = len(b[0])
    result = [[0] * cols_b for _ in range(rows_a)]

    for i in range(rows_a):
        for j in range(cols_b):
            for k in range(cols_a):
                result[i][j] += a[i][k] * b[k][j]
    return result

a = [[1, 2], [3, 4]]
b = [[5, 6], [7, 8]]
print(multiply_matrices(a, b))

Lab 12: Split and join a string

s = "hello world"
split_string = s.split()
joined_string = "-".join(split_string)
print(joined_string)



Lab 13: String slicing to rotate a string


def rotate_string(s, n):
    return s[n:] + s[:n]

print(rotate_string("abcdef", 2))

Lab 14: Find sum of all items in a dictionary

d = {'a': 1, 'b': 2, 'c': 3}
print(sum(d.values()))


Lab 15: Remove a key from a dictionary

def remove_key(d, key):
    if key in d:
        del d[key]
    return d

d = {'a': 1, 'b': 2, 'c': 3}
print(remove_key(d, 'b'))

Lab 16: Merging two Dictionaries

def merge_dictionaries(d1, d2):
    for key, value in d2.items():
        d1[key] = value
    return d1

d1 = {'a': 1, 'b': 2}
d2 = {'c': 3, 'd': 4}
print(merge_dictionaries(d1, d2))

Lab 17: Convert a List of Tuples into a Dictionary and Find the Size of a Tuple

def tuples_to_dict_and_size(lst):
    d = {}
    for key, value in lst:
        d[key] = value
    size_of_tuple = len(lst[0])
    return d, size_of_tuple

lst = [(1, 'a'), (2, 'b')]
dictionary, size = tuples_to_dict_and_size(lst)
print(dictionary)
print(size)
Lab 18: Maximum and Minimum K Elements in a Tuple

def max_min_k_elements(t, k):
    sorted_t = sorted(t)
    max_elements = sorted_t[-k:]
    min_elements = sorted_t[:k]
    return max_elements, min_elements

t = (5, 1, 3, 4, 2)
print(max_min_k_elements(t, 2))
Lab 19: Linear Search and Binary Search

def linear_search(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            return i
    return -1

def binary_search(arr, x):
    low, high = 0, len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == x:
            return mid
        elif arr[mid] < x:
            low = mid + 1
        else:
            high = mid - 1
    return -1

arr = [1, 2, 3, 4, 5]
print(linear_search(arr, 4))
print(binary_search(sorted(arr), 4))

Lab 20: Insertion Sort

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

arr = [5, 3, 4, 1, 2]
print(insertion_sort(arr))

Lab 21: Use of *args and **kwargs

def demo_function(*args, **kwargs):
    return args, kwargs

print(demo_function(1, 2, 3, a=4, b=5))
Lab 22: Function using Return Type and Arguments
python
Copy code
def add(a, b):
    return a + b

print(add(3, 5))
Lab 23: Concept of Class
python
Copy code
class DemoClass:
    def __init__(self, value):
        self.value = value

    def display(self):
        return self.value

obj = DemoClass(10)
print(obj.display())

Lab 24: Use of Libraries - CSV, Random, Tkinter

def write_to_csv(file_name, data):
    import csv
    with open(file_name, 'w') as f:
        writer = csv.writer(f)
        for row in data:
            writer.writerow(row)

def generate_random_number(start, end):
    import random
    return random.randint(start, end)

def create_tkinter_window():
    from tkinter import Tk, Label
    root = Tk()
    label = Label(root, text="Hello, Tkinter!")
    label.pack()
    root.mainloop()

write_to_csv('file.csv', [['Name', 'Age'], ['Alice', 25]])
print(generate_random_number(1, 100))

Lab 25: Use of Libraries - NumPy, Pandas, Matplotlib, Django

def numpy_operations():
    import numpy as np
    arr = np.array([1, 2, 3, 4])
    return arr

def pandas_operations():
    import pandas as pd
    df = pd.DataFrame({'Name': ['Alice', 'Bob'], 'Age': [25, 30]})
    return df

def matplotlib_plot():
    import matplotlib.pyplot as plt
    plt.plot([1, 2, 3], [4, 5, 6])
    plt.show()

print(numpy_operations())
print(pandas_operations())
